{"ast":null,"code":"var _jsxFileName = \"/home/jp/Documents/trybe-exercises/desenvolvimento_front-end/bloco-17-context-api-e-react-hooks/dia-2-react-hooks-usestate-e-usecontext/app-trybe-questions/src/context/QuestionsProvider.jsx\";\nimport React, { useState } from 'react';\nimport QuestionsContext from './QuestionsContext'; // para embrulhar tudo dentro do Provider, utilizaremos a props children\n\nfunction QuestionsProvider(_ref) {\n  let {\n    children\n  } = _ref;\n  // podemos usar quantos useStates forem necessários\n  //useState recebe como parâmetro um estado inicial(obj, array, string, etc) e retorna um array com dois itens [a,b]\n  // a) 1º item: state\n  // b) 2º item: setState -> atualiza o state\n  const [questions, setState] = useState([{\n    id: 0,\n    name: \"João Paulo\",\n    question: \"Quanto é 2 + 2?\",\n    claps: 0\n  }]);\n  return /*#__PURE__*/React.createElement(QuestionsContext.Provider, {\n    value: {\n      questions\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }\n  }, children);\n}\n\nexport default QuestionsProvider;","map":{"version":3,"sources":["/home/jp/Documents/trybe-exercises/desenvolvimento_front-end/bloco-17-context-api-e-react-hooks/dia-2-react-hooks-usestate-e-usecontext/app-trybe-questions/src/context/QuestionsProvider.jsx"],"names":["React","useState","QuestionsContext","QuestionsProvider","children","questions","setState","id","name","question","claps"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,gBAAP,MAA6B,oBAA7B,C,CAEA;;AACA,SAASC,iBAAT,OAAuC;AAAA,MAAZ;AAACC,IAAAA;AAAD,GAAY;AAErC;AACA;AACA;AACA;AAEA,QAAM,CAACC,SAAD,EAAYC,QAAZ,IAAyBL,QAAQ,CACrC,CACE;AACEM,IAAAA,EAAE,EAAE,CADN;AAEEC,IAAAA,IAAI,EAAE,YAFR;AAGEC,IAAAA,QAAQ,EAAE,iBAHZ;AAIEC,IAAAA,KAAK,EAAE;AAJT,GADF,CADqC,CAAvC;AAWA,sBACE,oBAAC,gBAAD,CAAkB,QAAlB;AAA2B,IAAA,KAAK,EAAE;AAACL,MAAAA;AAAD,KAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,QADH,CADF;AAKD;;AAED,eAAeD,iBAAf","sourcesContent":["import React, { useState } from 'react';\nimport QuestionsContext from './QuestionsContext';\n\n// para embrulhar tudo dentro do Provider, utilizaremos a props children\nfunction QuestionsProvider({children}) {\n\n  // podemos usar quantos useStates forem necessários\n  //useState recebe como parâmetro um estado inicial(obj, array, string, etc) e retorna um array com dois itens [a,b]\n  // a) 1º item: state\n  // b) 2º item: setState -> atualiza o state\n\n  const [questions, setState ] = useState(\n    [\n      {\n        id: 0,\n        name: \"João Paulo\",\n        question: \"Quanto é 2 + 2?\",\n        claps: 0,\n      },\n    ]\n  );\n\n  return (\n    <QuestionsContext.Provider value={{questions}}>\n      {children}\n    </QuestionsContext.Provider>\n  );\n}\n\nexport default QuestionsProvider;"]},"metadata":{},"sourceType":"module"}